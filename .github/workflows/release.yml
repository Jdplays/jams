# .github/workflows/release.yml

name: Build and Push Production Docker Image

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jdplays/jams

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and Validate Version
        run: |
          VERSION=$(cat VERSION)
          if ! echo "$VERSION" | grep -E '^[0-9]+(\.[0-9]+)*$' > /dev/null; then
            echo "::error ::Invalid version format in VERSION file: '$VERSION'. Must be numeric (e.g., 1.0.0)."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Clean up
        run: |
          docker logout ${{ env.REGISTRY }}
        
  release:
    runs-on: ubuntu-latest
    needs: build  # Waits for Docker image build to complete

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract and Validate Version
        run: |
          VERSION=$(cat VERSION)
          if ! echo "$VERSION" | grep -E '^[0-9]+(\.[0-9]+)*$' > /dev/null; then
            echo "::error ::Invalid version format in VERSION file: '$VERSION'. Must be numeric (e.g., 1.0.0)."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes with PR Links
        id: release_notes
        run: |
          echo "ðŸš€ **Release v${{ env.VERSION }}**" > release_notes.md
          echo "" >> release_notes.md
          echo "ðŸ“¦ **Docker Image:**" >> release_notes.md
          echo "\`\`\`sh" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "ðŸ“„ **Changelog:**" >> release_notes.md

          # Get the previous tag or first commit
          PREV_TAG=$(git describe --tags --abbrev=0 @^ 2>/dev/null || git rev-list --max-parents=0 HEAD)

          echo "" >> release_notes.md
          echo "**Changes since \`$PREV_TAG\`**" >> release_notes.md
          echo "" >> release_notes.md

          # Get only PR merge commits
          git log --merges --pretty=format:"- %s (%h)" $PREV_TAG..@ | grep "Merge pull request" | while read -r line; do
            PR_NUMBER=$(echo $line | grep -oP '(?<=#)[0-9]+')
            MESSAGE=$(echo $line | cut -d' ' -f4-)
            echo "- $MESSAGE ([#$PR_NUMBER](https://github.com/${{ github.repository }}/pull/$PR_NUMBER))" >> release_notes.md
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
