{"version":3,"file":"admin\\settings\\settings-helper.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACJO,SAAS,qBAAqB,CAAC,KAAqB;IACvD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;IAE/C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACjB,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI;aAC1B,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;aACvE,IAAI,CAAC,GAAG,CAAC;QAEd,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;QAClD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC;QAEtC,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAqB;QACjE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC;QACvC,KAAK,CAAC,IAAI,GAAG,UAAU;QACvB,KAAK,CAAC,EAAE,GAAG,QAAQ,IAAI,CAAC,EAAE,EAAE;QAC5B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QAE7B,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,aAAa;QAEhC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC;QAC7B,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;QAC5B,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO,SAAS;AACpB,CAAC;AAEM,SAAS,kBAAkB,CAAC,iBAA6B;IAC5D,MAAM,aAAa,GAAG,iBAAiB,CAAC,gBAAgB,CAAmB,2BAA2B,CAAC;IACvG,OAAO,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC5E,CAAC;AAEM,SAAS,sBAAsB,CAAC,iBAA6B,EAAE,GAAY;IAC9E,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;QACb,MAAM,KAAK,GAAG,iBAAiB,CAAC,aAAa,CAAmB,SAAS,EAAE,EAAE,CAAC;QAC9E,IAAI,KAAK,EAAE,CAAC;YACR,KAAK,CAAC,OAAO,GAAG,IAAI;QACxB,CAAC;IACL,CAAC,CAAC;AACN,CAAC","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./jams/static/ts/admin/settings/settings-helper.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Page } from \"@global/endpoints_interfaces\";\r\n\r\nexport function generatePageCheckboxs(pages:Partial<Page>[]): HTMLElement {\r\n    const container = document.createElement('div')\r\n\r\n    pages.forEach(page => {\r\n        const formattedName = page.name\r\n            .replace(/_/g, ' ')\r\n            .split(' ')\r\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n            .join(' ')\r\n        \r\n        const checkLabel = document.createElement('label')\r\n        checkLabel.classList.add('form-check')\r\n\r\n        const input = document.createElement('input') as HTMLInputElement\r\n        input.classList.add('form-check-input')\r\n        input.type = 'checkbox'\r\n        input.id = `page-${page.id}`\r\n        input.value = String(page.id)\r\n\r\n        const span = document.createElement('span')\r\n        span.classList.add('form-check-label')\r\n        span.textContent = formattedName\r\n\r\n        checkLabel.appendChild(input)\r\n        checkLabel.appendChild(span)\r\n        container.appendChild(checkLabel)\r\n    })\r\n\r\n    return container\r\n}\r\n\r\nexport function getSelectedPageIds(pageListContainer:HTMLElement): number[] {\r\n    const selectedItems = pageListContainer.querySelectorAll<HTMLInputElement>('.form-check-input:checked')\r\n    return Array.from(selectedItems).map(input => parseInt(input.value, 10))\r\n}\r\n\r\nexport function checkPageInputsFromIds(pageListContainer:HTMLElement, ids:number[]): void {\r\n    ids.forEach(id => {\r\n        const input = pageListContainer.querySelector<HTMLInputElement>(`#page-${id}`)\r\n        if (input) {\r\n            input.checked = true\r\n        }\r\n    })\r\n}"],"names":[],"sourceRoot":""}